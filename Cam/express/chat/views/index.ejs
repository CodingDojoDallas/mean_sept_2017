<!DOCTYPE html>
<html lang="en">
    <head>
        <title></title>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <link rel="stylesheet" href="/style.css">
        <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta/css/bootstrap.min.css" integrity="sha384-/Y6pD6FV/Vv2HJnA6t+vslU6fwYXjCFtcEpHbNJ0lyAFsXTsjBbfaDjzALeQsN6M" crossorigin="anonymous">
        <script src="https://code.jquery.com/jquery-3.2.1.slim.min.js" integrity="sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN" crossorigin="anonymous"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.11.0/umd/popper.min.js" integrity="sha384-b/U6ypiBEHpOf/4+1nzFpr53nxSS+GLCkfwBdFNTxtclqqenISfwAzpKaMNFNmj4" crossorigin="anonymous"></script>
        <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta/js/bootstrap.min.js" integrity="sha384-h0AbiXch4ZDo7tp9hKZ4TsHbi047NrKGLO3SEJAg45jXxnGIfYzk4Si90RDIqNm1" crossorigin="anonymous"></script>
        <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>
        <script type ='text/javascript' src="/socket.io/socket.io.js"></script>
        <script type="text/javascript">
            $(document).ready(function(){
                var socket = io.connect();
                // var name = prompt('What is your name?')
                console.log(name)
                //automatically load all messages after the user passes in their name.
                socket.emit('see_all_messages')
                socket.on('show_all_messages', function(data){
                    var html_str = ""
                    for (var i = 0; i < data.chats.length; i++) {
                        
                        html_str += "<p>" + data.chats[i].name + ": " + data.chats[i].message + "</p>"
                    }
                    console.log(html_str)
                    $('#conversation_board').html(html_str)
                });
                $('#new_message_form').submit(function(e){
                    e.preventDefault();
                    socket.emit('got_a_new_message', {message: $('#new_message').val(), name: name})
                })

                socket.on('render_new_message',function(data){
                    console.log(data.chats)
                    console.log(data.chats[0].name)
                    console.log(data)
                    var html_str = ""
                    
                    for (var i = 0; i < data.chats.length; i++) {
                        
                        html_str += "<p>" + data.chats[i].name + ": " + data.chats[i].message + "</p>"
                    }
                    console.log(html_str)
                    $('#conversation_board').html(html_str)
                });


            });
        </script>
        <script type="text/javascript">
            $(function() {
                var FADE_TIME = 150; // ms
                var TYPING_TIMER_LENGTH = 400; // ms
                var COLORS = [
                    '#e21400', '#91580f', '#f8a700', '#f78b00',
                    '#58dc00', '#287b00', '#a8f07a', '#4ae8c4',
                    '#3b88eb', '#3824aa', '#a700ff', '#d300e7'
                ];

                // Initialize variables
                var $window = $(window);
                var $usernameInput = $('.usernameInput'); // Input for username
                var $messages = $('.messages'); // Messages area
                var $inputMessage = $('.inputMessage'); // Input message input box

                var $loginPage = $('.login.page'); // The login page
                var $chatPage = $('.chat.page'); // The chatroom page

                // Prompt for setting a username
                var username;
                var connected = false;
                var typing = false;
                var lastTypingTime;
                var $currentInput = $usernameInput.focus();

                var socket = io();

                function addParticipantsMessage (data) {
                    var message = '';
                    if (data.numUsers === 1) {
                        message += "there's 1 participant";
                    } else {
                        message += "there are " + data.numUsers + " participants";
                    }
                    log(message);
                }

                // Sets the client's username
                function setUsername () {
                    username = cleanInput($usernameInput.val().trim());

                    // If the username is valid
                    if (username) {
                        $loginPage.fadeOut();
                        $chatPage.show();
                        $loginPage.off('click');
                        $currentInput = $inputMessage.focus();

                        // Tell the server your username
                        socket.emit('add user', username);
                    }
                }

                // Sends a chat message
                function sendMessage () {
                    var message = $inputMessage.val();
                // Prevent markup from being injected into the message
                    message = cleanInput(message);
                // if there is a non-empty message and a socket connection
                if (message && connected) {
                        $inputMessage.val('');
                        addChatMessage({
                            username: username,
                            message: message
                        });
                      // tell server to execute 'new message' and send along one parameter
                        socket.emit('new message', message);
                    }
                }

                // Log a message
                function log (message, options) {
                    var $el = $('<li>').addClass('log').text(message);
                    addMessageElement($el, options);
                }

                // Adds the visual chat message to the message list
                function addChatMessage (data, options) {
                // Don't fade the message in if there is an 'X was typing'
                    var $typingMessages = getTypingMessages(data);
                    options = options || {};
                    if ($typingMessages.length !== 0) {
                        options.fade = false;
                        $typingMessages.remove();
                    }

                var $usernameDiv = $('<span class="username"/>')
                  .text(data.username)
                  .css('color', getUsernameColor(data.username));
                var $messageBodyDiv = $('<span class="messageBody">')
                  .text(data.message);

                var typingClass = data.typing ? 'typing' : '';
                var $messageDiv = $('<li class="message"/>')
                  .data('username', data.username)
                  .addClass(typingClass)
                  .append($usernameDiv, $messageBodyDiv);

                addMessageElement($messageDiv, options);
                }

                // Adds the visual chat typing message
                function addChatTyping (data) {
                    data.typing = true;
                    data.message = 'is typing';
                    addChatMessage(data);
                }

                // Removes the visual chat typing message
                function removeChatTyping (data) {
                    getTypingMessages(data).fadeOut(function () {
                        $(this).remove();
                    });
                }

                // Adds a message element to the messages and scrolls to the bottom
                // el - The element to add as a message
                // options.fade - If the element should fade-in (default = true)
                // options.prepend - If the element should prepend
                //   all other messages (default = false)
                function addMessageElement (el, options) {
                    var $el = $(el);

                    // Setup default options
                    if (!options) {
                      options = {};
                    }
                    if (typeof options.fade === 'undefined') {
                      options.fade = true;
                    }
                    if (typeof options.prepend === 'undefined') {
                      options.prepend = false;
                    }

                    // Apply options
                    if (options.fade) {
                      $el.hide().fadeIn(FADE_TIME);
                    }
                    if (options.prepend) {
                      $messages.prepend($el);
                    } else {
                      $messages.append($el);
                    }
                    $messages[0].scrollTop = $messages[0].scrollHeight;
                }

                // Prevents input from having injected markup
                function cleanInput (input) {
                    return $('<div/>').text(input).html();
                }

                // Updates the typing event
                function updateTyping () {
                    if (connected) {
                      if (!typing) {
                        typing = true;
                        socket.emit('typing');
                      }
                      lastTypingTime = (new Date()).getTime();

                      setTimeout(function () {
                        var typingTimer = (new Date()).getTime();
                        var timeDiff = typingTimer - lastTypingTime;
                        if (timeDiff >= TYPING_TIMER_LENGTH && typing) {
                          socket.emit('stop typing');
                          typing = false;
                        }
                      }, TYPING_TIMER_LENGTH);
                    }
                }

                // Gets the 'X is typing' messages of a user
                function getTypingMessages (data) {
                    return $('.typing.message').filter(function (i) {
                      return $(this).data('username') === data.username;
                    });
                }

                // Gets the color of a username through our hash function
                function getUsernameColor (username) {
                // Compute hash code
                    var hash = 7;
                    for (var i = 0; i < username.length; i++) {
                       hash = username.charCodeAt(i) + (hash << 5) - hash;
                    }
                    // Calculate color
                    var index = Math.abs(hash % COLORS.length);
                    return COLORS[index];
                    }

                    // Keyboard events

                    $window.keydown(function (event) {
                    // Auto-focus the current input when a key is typed
                    if (!(event.ctrlKey || event.metaKey || event.altKey)) {
                      $currentInput.focus();
                    }
                    // When the client hits ENTER on their keyboard
                    if (event.which === 13) {
                      if (username) {
                        sendMessage();
                        socket.emit('stop typing');
                        typing = false;
                      } else {
                        setUsername();
                      }
                    }
                });

                $inputMessage.on('input', function() {
                    updateTyping();
                });

                // Click events

                // Focus input when clicking anywhere on login page
                $loginPage.click(function () {
                    $currentInput.focus();
                });

                // Focus input when clicking on the message input's border
                $inputMessage.click(function () {
                    $inputMessage.focus();
                });

                // Socket events

                // Whenever the server emits 'login', log the login message
                socket.on('login', function (data) {
                    connected = true;
                // Display the welcome message
                    var message = "Lets have a chat – ";
                    log(message, {
                        prepend: true
                    });
                    addParticipantsMessage(data);
                });

                // Whenever the server emits 'new message', update the chat body
                socket.on('new message', function (data) {
                    addChatMessage(data);
                });

                // Whenever the server emits 'user joined', log it in the chat body
                socket.on('user joined', function (data) {
                    log(data.username + ' joined');
                    addParticipantsMessage(data);
                });

                // Whenever the server emits 'user left', log it in the chat body
                socket.on('user left', function (data) {
                    log(data.username + ' left');
                    addParticipantsMessage(data);
                    removeChatTyping(data);
                });

                // Whenever the server emits 'typing', show the typing message
                socket.on('typing', function (data) {
                    addChatTyping(data);
                });

                // Whenever the server emits 'stop typing', kill the typing message
                socket.on('stop typing', function (data) {
                    removeChatTyping(data);
                });

                socket.on('disconnect', function () {
                    log('you have been disconnected');
                });

                socket.on('reconnect', function () {
                    log('you have been reconnected');
                    if (username) {
                        socket.emit('add user', username);
                    }
                });

                socket.on('reconnect_error', function () {
                    log('attempt to reconnect has failed');
                });

                });
        </script>
        <style type="text/css" media="screen">
            /* Fix user-agent */

            * {
              box-sizing: border-box;
            }

            html {
              font-weight: 300;
              -webkit-font-smoothing: antialiased;
            }

            html, input {
              font-family:
                "HelveticaNeue-Light",
                "Helvetica Neue Light",
                "Helvetica Neue",
                Helvetica,
                Arial,
                "Lucida Grande",
                sans-serif;
            }

            html, body {
              height: 95%;
              margin: 0;
              padding: 0;
            }

            ul {
              list-style: none;
              word-wrap: break-word;
            }

            /* Pages */

            .pages {
              height: 95%;
              margin: 0;
              padding: 0;
              width: 100%;
            }

            .page {
              height: 95%;
              position: absolute;
              width: 100%;
            }

            /* Login Page */

            .login.page {
              background-color: #000;
            }

            .login.page .form {
              height: 100px;
              margin-top: -100px;
              position: absolute;

              text-align: center;
              top: 50%;
              width: 100%;
            }

            .login.page .form .usernameInput {
              background-color: transparent;
              border: none;
              border-bottom: 2px solid #fff;
              outline: none;
              padding-bottom: 15px;
              text-align: center;
              width: 400px;
            }

            .login.page .title {
              font-size: 200%;
            }

            .login.page .usernameInput {
              font-size: 200%;
              letter-spacing: 3px;
            }

            .login.page .title, .login.page .usernameInput {
              color: #fff;
              font-weight: 100;
            }

            /* Chat page */

            .chat.page {
              display: none;
            }

            /* Font */

            .messages {
              font-size: 150%;
            }

            .inputMessage {
              font-size: 100%;
            }

            .log {
              color: gray;
              font-size: 70%;
              margin: 5px;
              text-align: center;
            }

            /* Messages */

            .chatArea {
              height: 100%;
              padding-bottom: 60px;
            }

            .messages {
              height: 100%;
              margin: 0;
              overflow-y: scroll;
              padding: 10px 20px 10px 20px;
            }

            .message.typing .messageBody {
              color: gray;
            }

            .username {
              font-weight: 700;
              overflow: hidden;
              padding-right: 15px;
              text-align: right;
            }

            /* Input */

            .inputMessage {
              border: 10px solid #000;
              bottom: 0;
              height: 60px;
              left: 0;
              outline: none;
              padding-left: 10px;
              position: absolute;
              right: 0;
              width: 100%;
            }
        </style>
    </head>
    <body>
        <div class="text-center">
            <h1>Chatroom!</h1>
        </div>
        <div> 
            <ul class="pages">
                <li class="chat page">
                  <div class="chatArea">
                    <ul class="messages"></ul>
                  </div>
                  <input class="inputMessage" placeholder="Type here..."/>
                </li>
                <li class="login page">
                    <div class="form">
                        <h3 class="title">Add a nickname?</h3>
                        <input class="usernameInput" type="text" />
                    </div>
                </li>
            </ul>
        </div>
    </body>
</html>